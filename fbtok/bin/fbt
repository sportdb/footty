#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbt
##     -or-
##   ruby -I ../parser/lib -I ./lib bin/fbt
##     -or-
##   ruby -I ../parser/lib -I ../sportdb-structs/lib -I ./lib bin/fbt


## our own code
require 'fbtok'


##
## read textfile
##   and dump tokens
##
##   fbt  ../openfootball/.../euro.txt




 args = ARGV
 opts = { debug: false,
          file:  nil,
        }

 parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?
#    parser.on( "-q", "--quiet",
#                 "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
#      opts[:debug] = false
#    end
   parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
     opts[:debug] = true
   end

    parser.on( "-f FILE", "--file FILE",
                    "read datafiles (pathspecs) via .csv file") do |file|
      opts[:file] = file
    end


end
parser.parse!( args )



if opts[:debug]
  puts "OPTS:"
  p opts
  puts "ARGV:"
  p args
  
  SportDb::QuickMatchReader.debug = true
  SportDb::MatchParser.debug      = true
else
  SportDb::QuickMatchReader.debug = false
  SportDb::MatchParser.debug      = false
  LogUtils::Logger.root.level = :info
end


## todo/check - use packs or projects or such
##                instead of specs - why? why not?
specs =  if opts[:file]
            SportDb::Parser::Opts.read_pathspecs( opts[:file] )
         else
           paths =  if args.empty?
                      ['/sports/openfootball/euro/2021--europe/euro.txt',
                       '/sports/openfootball/euro/2024--germany/euro.txt'] 
                    else
                       ## check for directories
                       ##   and auto-expand
                       SportDb::Parser::Opts.expand_args( args )
                    end
             ## always return array of specs
            [SportDb::Parser::Opts.build_pathspec( paths: paths)]  
         end



  specs.each_with_index do |spec,i|
    paths = spec.paths
    rec   = spec.rec
    errors = []

    paths.each_with_index do |path,j|
      puts "==> [#{j+1}/#{paths.size}] reading >#{path}<..."
      quick = SportDb::QuickMatchReader.new( read_text( path ) )
      matches = quick.parse

      if quick.errors?
        puts "!! #{quick.errors.size} error(s):"
        pp quick.errors

        quick.errors.each do |err|
          errors << [ path, *err ]   # note: use splat (*) to add extra values (starting with msg)
        end
      end
      puts "  #{matches.size} match(es)"
    end

    if errors.size > 0
      puts
      puts "!! #{errors.size} PARSE ERRORS in #{paths.size} datafile(s)"
      pp errors
    else
      puts
      puts "  OK - no parse errors in #{paths.size} datafile(s)"
    end

     ## add errors to rec via rec['errors'] to allow
     ##   for further processing/reporting
     rec['errors'] = errors
  end



###
## generate a report if --file option used
if opts[:file]
  buf = SportDb::Parser::BatchReport.new( 
            specs, 
            title: 'fbt summary report' ).build

  puts
  puts "SUMMARY:"
  puts buf

  #  maybe write out in the future?
  # basedir  = File.dirname( opts[:file] )
  # basename = File.basename( opts[:file], File.extname( opts[:file] ))
end



puts "bye"

