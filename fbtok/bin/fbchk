#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbchk


## local hack for debugging
##   use local versions if present
$LOAD_PATH.unshift( File.expand_path( '/sports/sportdb/sport.db/sportdb-structs/lib' ))
$LOAD_PATH.unshift( File.expand_path( '/sports/sportdb/sport.db/sportdb-catalogs/lib' ))
$LOAD_PATH.unshift( File.expand_path( '/sports/sportdb/sport.db/sportdb-search/lib' ))
$LOAD_PATH.unshift( File.expand_path( '/sports/sportdb/sport.db/sportdb-formats/lib' ))


## our own code
require 'fbtok'



## local hack
##   if exists up-to-date catalog db (use local version NOT built-in)
catalog_path = '/sports/sportdb/sport.db/catalog/catalog.db'
if File.exist?( catalog_path )
  SportDb::Import.config.catalog_path = catalog_path
end


 args = ARGV
 opts = { debug: false,
          file:  nil,
          teams: true,   ## check/lint teams (name errros etc.)
        }

 parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?
#    parser.on( "-q", "--quiet",
#                 "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
#      opts[:debug] = false
#    end
   parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
     opts[:debug] = true
   end

    parser.on( "-f FILE", "--file FILE",
                    "read datafiles (pathspecs) via .csv file") do |file|
      opts[:file] = file
    end

    parser.on( "--[no-]teams",
                  "turn on/off team name checks (default: #{opts[:teams]})") do |teams|
      opts[:teams] = teams
    end
end
parser.parse!( args )


if opts[:debug]
  puts "OPTS:"
  p opts
  puts "ARGV:"
  p args

  SportDb::QuickMatchLinter.debug = true
  SportDb::QuickMatchReader.debug = true
  SportDb::MatchParser.debug      = true
else
  SportDb::QuickMatchLinter.debug = false
  SportDb::QuickMatchReader.debug = false
  SportDb::MatchParser.debug      = false
  LogUtils::Logger.root.level = :info
end




## todo/check - use packs or projects or such
##                instead of specs - why? why not?
specs =  if opts[:file]
            SportDb::Parser::Opts.read_pathspecs( opts[:file] )
         else
           paths =  if args.empty?
                      [] 
                    else
                       ## check for directories
                       ##   and auto-expand
                       SportDb::Parser::Opts.expand_args( args )
                    end
             ## always return array of specs
            [SportDb::Parser::Opts.build_pathspec( paths: paths)]  
         end




  specs.each_with_index do |spec,i|
    paths = spec.paths
    rec   = spec.rec

    errors = []
    paths.each_with_index do |path,j|
      puts "==> [#{i+1}/#{specs.size}, #{j+1}/#{paths.size}] reading >#{path}<..."
      quick = SportDb::QuickMatchLinter.new( read_text( path ),
                                              check_teams: opts[:teams] )
      matches = quick.parse


      if quick.errors?
        puts "!! #{quick.errors.size} error(s):"
        pp quick.errors

        quick.errors.each do |err|
          errors << [ path, *err ]   # note: use splat (*) to add extra values (starting with msg)
        end
      end
      puts "  #{matches.size} match(es)"
    end

    if errors.size > 0
      puts
      puts "!! #{errors.size} PARSE ERRORS in #{paths.size} datafile(s)"
      pp errors
    else
      puts
      puts "  OK - no parse errors in #{paths.size} datafile(s)"
    end

     ## add errors to rec via rec['errors'] to allow
     ##   for further processing/reporting
     rec['errors'] = errors
  end



###
## generate a report if --file option used
if opts[:file]
  buf = SportDb::Parser::BatchReport.new( 
            specs, 
            title: 'fbchk summary report' ).build

  puts
  puts "SUMMARY:"
  puts buf

  basedir  = File.dirname( opts[:file] )
  basename = File.basename( opts[:file], File.extname( opts[:file] ))
  outpath  = "#{basedir}/fbchk.#{basename}.txt"
  write_text( outpath, buf )
end


puts "bye"

