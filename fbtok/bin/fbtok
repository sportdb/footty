#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbtok

require 'fbtok'

args = ARGV
 

opts = {
    debug: true,
    file:  nil,
}

parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options] PATH"


  parser.on( "-q", "--quiet",
             "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
    opts[:debug] = false
  end
  parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
    opts[:debug] = true
  end

=begin
  parser.on( "--metal",
                 "turn off typed parse tree; show to the metal tokens"+
                   " (default: #{opts[:metal]})" ) do |metal|
    opts[:metal] = true
  end
=end


  parser.on( "-f FILE", "--file FILE",
                "read datafiles (pathspecs) via .csv file") do |file|
    opts[:file] = file
    ## note: for batch (massive) processing auto-set debug (verbose output) to false (as default)
    opts[:debug] = false
  end
end
parser.parse!( args )



if opts[:debug]
  puts "OPTS:"
  p opts
  puts "ARGV:"
  p args

  SportDb::Parser::Linter.debug = true    
  SportDb::Parser::Opts.debug   = true
end



## todo/check - use packs or projects or such
##                instead of specs - why? why not?
specs =  if opts[:file]
            SportDb::Parser::Opts.read_pathspecs( opts[:file] )
         else
           paths =  if args.empty?
                      ['/sports/openfootball/euro/2021--europe/euro.txt',
                       '/sports/openfootball/euro/2024--germany/euro.txt'] 
                    else
                       ## check for directories
                       ##   and auto-expand
                       SportDb::Parser::Opts.expand_args( args )
                    end
             ## always return array of specs
            [SportDb::Parser::Opts.build_pathspec( paths: paths)]  
         end


linter = SportDb::Parser::Linter.new


specs.each_with_index do |spec,i|
    paths = spec.paths
    rec   = spec.rec
   
    errors = []

   paths.each_with_index do |path,j|
      puts "==> [#{i+1}/#{specs.size}, #{j+1}/#{paths.size}] reading >#{path}<..."
      tokens =  linter.read( path, parse: false )  ## only tokenize (do NOT parse)

      puts "   #{tokens.size} token(s)"    

      errors += linter.errors    if linter.errors?
   end

   if errors.size > 0
      puts
      pp errors
      puts
      puts "!!   #{errors.size} tokenize error(s) in #{paths.size} datafiles(s)"
   else
      puts
      puts "OK   no tokenize errors found in #{paths.size} datafile(s)"
   end

   ## add errors to rec via rec['errors'] to allow
   ##   for further processing/reporting
   rec['errors'] = errors
end


###
## generate a report if --file option used
if opts[:file]

  buf = SportDb::Parser::BatchReport.new( 
            specs, 
            title: 'fbtok summary report' ).build

  puts
  puts "SUMMARY:"
  puts buf

  #  maybe write out in the future?
  # basedir  = File.dirname( opts[:file] )
  # basename = File.basename( opts[:file], File.extname( opts[:file] ))
end

puts "bye"

