#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbtxt2json


#####
## todo
##   add option for [no]-halt-on-error (default: false)
##      or use a different (shorter) name e.g. --resume?



## our own code
require 'sportdb/quick'

require 'fbtok'  ### check if requires sportdb/quick  (no need to duplicate)



require 'optparse'



args = ARGV
opts = {  debug:  false,
          output: nil,
          summary: false,
          seasons: [],
       }

parser = OptionParser.new do |parser|
parser.banner = "Usage: #{$PROGRAM_NAME} [options] PATH"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?
#    parser.on( "-q", "--quiet",
#                 "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
#      opts[:debug] = false
#    end

   parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
     opts[:debug] = true
   end

   parser.on( "-o PATH", "--output PATH",
                  "output to file / dir" ) do |output|
     opts[:output] = output
   end

   parser.on( "--summary", 
                  "(auto-)generate summary (index.html) page (default: #{opts[:summary]})" ) do |summary|
     opts[:summary] = summary
   end

   parser.on( "--seasons SEASONS",
                  "turn on processing only seasons (default: #{!opts[:seasons].empty?}" ) do |seasons|
       pp seasons
       seasons = seasons.split( /[, ]/ )
       seasons = seasons.map {|season| Season.parse(season) }               
       opts[:seasons] = seasons
   end   
end
parser.parse!( args )


puts "OPTS:"
p opts
puts "ARGV:"
p args



paths = if args.empty?
          ['/sports/openfootball/euro/2021--europe/euro.txt']
        else
          args
        end


if opts[:debug]
   SportDb::QuickMatchReader.debug = true
   SportDb::MatchParser.debug      = true
else
   SportDb::QuickMatchReader.debug = false
   SportDb::MatchParser.debug      = false
   LogUtils::Logger.root.level = :info
end


###
##  two modes -   process directories or  concat(enate)d files 
##
##   check if args is a directory
##
dirs  = 0
files = 0
paths.each do |path|
     if Dir.exist?( path )
        dirs  += 1
     elsif File.exist?( path )
        files += 1
     else ## not a file or dir repprt errr
         raise ArgumentError, "file/dir does NOT exist - #{path}"
     end
end

if dirs > 0 && files > 0
     raise ArgumentError, "#{files} file(s), #{dirs} dir(s) - can only process dirs or files but NOT both; sorry"
end



def parse( txt,
            summary: nil, 
            dump: false )   ### check - name parse_txt or txt_to_json or such - why? why not?
   quick = SportDb::QuickMatchReader.new( txt )
   matches = quick.parse
   name    = quick.league_name   ## quick hack - get league+season via league_name
 
   data = { 'name'    => name,
            'matches' => matches.map {|match| match.as_json }}
  
   if dump
     pp data
     puts
   end
   puts "  #{matches.size} match(es)"
 
   if quick.errors?
      puts "!! #{quick.errors.size} parse error(s):"
      pp quick.errors
      exit 1
   end


   if summary
      ## add stats to summary page
      summary << "- #{name} | #{matches.size} match(es)\n"
   end

   data
end


if files > 0
  ## step 1 - concat(enate) all text files into one
  txt = String.new
  paths.each_with_index do |path,i|
    puts "==> reading file [#{i+1}/#{paths.size}] >#{path}<..."
    txt += "\n\n"   if i > 0
    txt += read_text( path )
  end

  ## step 2 - parse (matches) in the football.txt format
  data = parse( txt, dump: true )
 
  if opts[:output]
     puts "==> writing matches to #{opts[:output]}"
     write_json( opts[:output], data )
  end
elsif dirs > 0

   ## use a html pre(formatted) text
   summary = String.new
   summary << "<pre>\n"
   summary << "run on #{Time.now.to_s}\n\n"   ## add version and such - why? why not?

   paths.each_with_index do |path,i|
      puts "==> reading dir [#{i+1}/#{paths.size}] >#{path}<..."
      summary << "==> [#{i+1}/#{paths.size}] dir #{path}\n"


      datafiles = SportDb::Parser::Opts._find( path, seasons: opts[:seasons] )
      pp datafiles
      puts "   #{datafiles.size} datafile(s)"
      summary << "    #{datafiles.size} datafile(s)\n\n"

      datafiles.each do |datafile|
         txt = read_text( datafile )
         data = parse( txt, summary: summary )

         if opts[:output]
            ### norm - File.expand_path !!!
            ##   note - use '.' to use (relative to) local directory !!!
            reldir = File.expand_path(File.dirname( path ))   ## keep last dir (in relative name)
            relpath = datafile.sub( reldir+'/', '' )
            dir     = File.dirname( relpath )
            ## puts "  reldir = #{reldir}, datafile = #{datafile}"
            ## puts "  relpath = #{relpath}, dir = #{dir}"
            basename = File.basename( relpath, File.extname(relpath)) 
            outpath  = "#{opts[:output]}/#{dir}/#{basename}.json"
         else
           dir = File.dirname( datafile )  
           basename = File.basename( datafile, File.extname(datafile) ) 
           outpath = "#{dir}/#{basename}.json"
         end
         puts "  writing matches to #{outpath}"
         write_json( outpath, data )
      end
   end

   summary << "</pre>"
   puts summary
   ## note - do NOT write-out summary if seasons filter is used!!!
   if opts[:summary] && opts[:seasons].size == 0
     write_text( "#{opts[:output]}/index.html", summary )
   end
else 
   ## do nothing; no args
end




puts "bye"

