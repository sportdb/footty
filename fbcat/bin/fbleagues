#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbleagues

#####
#  print/dump all leagues
#        if no args passed along
#       e.g.  $ fbleagues
#    otherwise filter by country code
#       e.g.  $ fbleagues eng



## our own code
require 'fbcat'

require 'optparse'



## default to built-in for now

## local hack
## if exists up-to-date catalog db (use local version NOT built-in)
catalog_path = '/sports/sportdb/sport.db/catalog/catalog.db'
path =  if File.exist?( catalog_path )
           catalog_path
        else
           "#{FootballDb::Data.data_dir}/catalog.db"
        end


config = {
        adapter:  'sqlite3',
        database:   path
}
pp config


args = ARGV
opts = { debug: false,
         codes: false,  ## show codes
         names: false,  ## show (alt) names
       }

parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options] KEYS"

   parser.on( "--codes",
               "show codes (default: #{opts[:codes]})" ) do |codes|
     opts[:codes] = true
   end

   parser.on( "--names",
               "show (alt) names (default: #{opts[:names]})" ) do |names|
     opts[:names] = true
   end

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?
#    parser.on( "-q", "--quiet",
#                 "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
#      opts[:debug] = false
#    end
   parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
     opts[:debug] = true
   end
end
parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args



ActiveRecord::Base.establish_connection( config )


puts "  #{Country.count} countries"
puts "        #{CountryName.count} country names"
puts "  #{Club.count} clubs"
puts "        #{ClubName.count} club names"
puts "  #{NationalTeam.count} national teams"
puts "        #{NationalTeamName.count} national team names"
puts "  #{League.count} leagues"
puts "        #{LeagueName.count} league names"
puts "        #{LeaguePeriod.count} league periods"



def print_league( league, show_codes:,
                          show_names: )    
    periods = league.league_periods

  if league.intl? 
    if league.clubs?
        print "INTL CLUBS"  
    else
        print "INTL NATIONAL TEAMS"  
    end
  end

  print "#{league.country.key}, #{league.country.name} (#{league.country.code})"   if league.country
  print " - "

  print "#{league.name} "
  print "(#{periods.size}) "  if periods.size > 1
  print "\n"

  if show_names
    print  "   (alt) names - #{league.alt_names}"
    print "\n"
  end

   if show_codes
       codes = league.league_codes
       print  "   %2d code(s) - " % codes.size
       print codes.map { |rec| rec.code }.join( ' ' )
       print "\n"
   end

   if show_names
       names = league.league_names
       print  "   %2d name(s) - " % names.size
       print names.map { |rec| rec.name }.join( ' ' )
       print "\n"
   end


    periods.each do |period|
      print "  - #{period.tier_key}, "
      print "#{period.start_season}"  if period.start_season
      print "-"
      print "#{period.end_season} "  if period.end_season
      print "   "
      if period.name == league.name 
        print '"' 
      else
        print "#{period.name}" 
      end 
      print " / #{period.qname}"  if period.name != period.qname
      print ",  #{period.slug}"
      print "\n"
      ## pp period
 
      if show_codes
        codes = period.league_period_codes
        print  "     %2d code(s) - " % codes.size 
        print codes.map { |rec| rec.code }.join( ' ' )
        print "\n"
      end
      if show_names
        names = period.league_period_names
        print  "     %2d name(s) - " % names.size 
        print names.map { |rec| rec.name }.join( ' ' )
        print "\n"
      end
    end
end


def print_leagues( leagues, show_codes: true,
                            show_names: true )
   leagues.each do |league|
     print_league( league, show_codes: show_codes,
                           show_names: show_names )
   end
   puts "  #{leagues.size} record(s)"
end


if args.size > 0
    args.each do |arg|
        ## assume arg is country key
        country = arg
        puts
        puts "==> #{country}"
        leagues = League.where( "country_key = '#{country}'" )
        print_leagues( leagues, show_codes: opts[:codes],
                                show_names: opts[:names] )
    end
else
puts
puts "==> INTL NATIONAL TEAMS"
leagues = League.where( 'intl = true AND clubs = false')
print_leagues( leagues, show_codes: opts[:codes],
                        show_names: opts[:names] )


puts
puts "==> INTL CLUBS"
leagues = League.where( 'intl = true AND clubs = true')
print_leagues( leagues, show_codes: opts[:codes],
                        show_names: opts[:names] )

puts
puts "==> NATIONAL LEAGUES & CUPS"
leagues = League.where( 'intl = false AND clubs = true')
print_leagues( leagues, show_codes: opts[:codes],
                        show_names: opts[:names] )
end


puts "bye"

