#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbgen


require 'sportdb/writers'
require 'leagues'


require 'optparse'   ## check if included in cocos prelude?



args = ARGV
opts = {
  source_path: [],
  dry:      false,
  debug:    true,
  file:     nil,
}

parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options] [args]"

    parser.on( "--dry",
                "dry run; do NOT write - default is (#{opts[:dry]})" ) do |dry|
      opts[:dry] = true
    end
    parser.on( "-q", "--quiet",
               "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
      opts[:debug] = false
    end

    parser.on( "-I DIR", "--include DIR",
                "add directory to (source) search path - default is (#{opts[:source_path].join(',')})") do |dir|
      opts[:source_path] += path
    end

    parser.on( "-f FILE", "--file FILE",
                "read leagues (and seasons) via .csv file") do |file|
      opts[:file] = file
    end
end
parser.parse!( args )



if opts[:source_path].empty? &&
  File.exist?( '/sports/cache.api.fbdat')  &&
  File.exist?( '/sports/cache.wfb' )
    opts[:source_path] << '/sports/cache.api.fbdat'
    opts[:source_path] << '/sports/cache.wfb'
end


if opts[:source_path].empty?
  opts[:source_path] = ['.']    ## use ./ as default
end

source_path = opts[:source_path]


puts "OPTS:"
p opts
puts "ARGV:"
p args


### get latest season with autofiller
##     todo use new LeaguesetAutofiller class - why? why not?
##    or move code of autofiller here - why? why not?
##
##    share with fbup ???
autofiller = ->(league_query) {           
  Leagueset.autofiller( league_query, source_path: source_path )
} 


datasets =   if opts[:file]
                  read_leagueset( opts[:file], autofill: autofiller )
             else
                  parse_leagueset_args( args, autofill: autofiller )
             end

puts "datasets:"
pp datasets



root_dir =  './o'
puts "  (output) root_dir: >#{root_dir}<"


### step 0 - validate and fill-in seasons etc.
datasets.validate!( source_path: source_path )


## step 1 - generate
datasets.each do |league_query, seasons|
    puts "==> gen #{league_query} - #{seasons.size} seasons(s)..."

    seasons.each do |season|
      ## todo/fix - use find_by! - add upstream
      league_info = LeagueCodes.find_by( code: league_query, season: season )
      pp league_info
  
      league_code = league_info['code']
      league_name = league_info['name']


      filename = "#{season.to_path}/#{league_code}.csv"
      path = find_file( filename, path: source_path )

      ## get matches
      puts "  ---> reading matches in #{path} ..."
      matches = SportDb::CsvMatchParser.read( path )
      puts "     #{matches.size} matches"

      ## build
      txt = SportDb::TxtMatchWriter.build_v2( matches )
      puts txt   if opts[:debug]


      buf = String.new
      buf << "= #{league_name} #{season}\n\n"
      buf << txt

      outpath = "#{root_dir}/foot/#{season.to_path}/#{league_code}.txt"

      if opts[:dry]
        puts "   (dry) writing to >#{outpath}<..."
      else
        write_text( outpath, buf )
      end
    end
end


puts
puts "bye"